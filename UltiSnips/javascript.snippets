# BOILERPLATE
snippet [] "JavaScript boilerplate" b
'use strict';

class ${1:Foo} {
}

module.exports = $1;
endsnippet

snippet /\[a(sync)?\]/ "Async function expression as IIFE" br
(async () => {
	${1:${VISUAL}}
})();
endsnippet

snippet [cypress] "Cypress default boilerplate" b
import React from 'react';
import CypressWrapper from '../../../support/CypressWrapper';
import ${1:SomeComponent} from '../../src/lib/${2:$1}';

describe('<$1>', () => {
	before(() => {
		cy.mount(
			<CypressWrapper storeData={initialReduxState}>
				<$1 />
			</CypressWrapper>,
		);
	});

	beforeEach(() => {
		cy.get('tbody tr').as('agentRows');
	});

	it('checks initial redux state holds correct amount of rows', () => {
		cy.get('@agentRows').should('have.length', 3);
	});

	it('uses redux action to update table', () => {
		cy.dispatch(
			actionPutAgentStatus({
				data: [{ display_name: 'Billy', status: 'Online' }],
			}),
			'Set billy online',
		);
		cy.get('@agentRows').should('have.length', 1);
	});
});
endsnippet

snippet [CypressTheme] "Cypress default boilerplate" b
import React from 'react';
import CypressThemeWrapper from '../../support/CypressThemeWrapper';
import ${1:SomeComponent} from '../../src/lib/${2:$1}';

const component = (foo) => (
	<CypressThemeWrapper>
		<$1 />
	</CypressThemeWrapper>
);

describe('<$1>', () => {
	const selector = 'div[class^="AgentStatus"]';

	it('sets correct tooltip text when "Away"', () => {
		cy.mount(component('Foo'));
		cy.get(selector).should('have.attr', 'title', 'Away');
	});
});
endsnippet

snippet [func] "JavaScript function module boilerplate" b
'use strict';

function ${1:Foo}() {
}

module.exports = $1;
endsnippet

snippet [jest] "Jest boilerplate" b
const ${1:module_you_are_testing} = require('../lib/${2:modulename}');

describe('something to be tested', () => {
	const instance = new $1();

	it('works', () => {
		expect(true).toBe(true);
	});

	it('works', () => {
		const input = [
			{
				in: { foo: true },
				out: 'bar',
			},
			{
				in: { baz: false },
				out: 'quxx',
			},
		];
		input.forEach(payload => {
			const result = new $1(payload.in);
			expect(result).toEqual(payload.out);
		});
	});
});
endsnippet

# COMMON

snippet afunc "async function()" b
async function ${1:name}($0) {
}
endsnippet

snippet cl "console.log" b
console.log(${1:${VISUAL}});
endsnippet

snippet cll "console.log on steroids" b
const util = require('util');
console.log(util.inspect(${1:${VISUAL}}, false, null, true));
endsnippet

snippet ce "console.error" b
console.error(${1:${VISUAL}});
endsnippet

snippet cee "console.error on steroids" b
const util = require('util');
console.error(util.inspect(${1:${VISUAL}}, false, null, true));
endsnippet

snippet "can|has(Own)?Prop(erty)?" "description" r
${1:myObj}.hasOwnProperty(${2:myProp})
endsnippet

snippet debugger "debugger for `node inspect` or `npx --node-arg=--inspect-brk`" b
while (1) {
	let asyncFunc;
	debugger;
	try {
		console.log(await asyncFunc);
	}
	catch (err) {
		console.log(err);
	}
}
endsnippet

snippet deepClone "deep (simple) clone function"
/**
 * Low-frills deep copy.
 * @see https://stackoverflow.com/a/15040626
 * @param {Any} v - any value that can be serialized to JSON
 * @returns {Any} - copied value
 */
const deepClone = v => JSON.parse(JSON.stringify(v));
endsnippet

snippet entries "Object.entries" b
Object.entries(${1:object}).forEach(([key, value]) => {
	$0
});
endsnippet

snippet eslint "eslint-disable" b
/* eslint-disable no-console */
endsnippet

snippet for "for ... of" b
for (const ${1:[key, value]} of ${2:iterable}) {
	$0
}
endsnippet

snippet func "function()" b
function ${1:name}($0) {
}
endsnippet

snippet isArray "Array.isArray()" i
Array.isArray(${1:value})
endsnippet

snippet "[Pp]romise" "new Promise()" br
new Promise((resolve, reject) => {
	${VISUAL}
});
endsnippet

snippet reduce "ES6 reduce"
${1:objectName}.reduce((accumulator, currentValue) => {
  $0accumulator[currentValue] = 'foo'
	return accumulator;
}, {});
endsnippet

snippet sleep "async sleep" b
const sleep = m => new Promise(r => setTimeout(r, m))
await sleep(2000);
endsnippet

snippet switch "switch statement" b
switch(${1:expression}) {
	case x:
		// code block
		break;
	case y:
		// code block
		break;
	default:
		// code block
}
endsnippet

snippet throw "throw new errror" b
throw new Error('${1:Expected value to be string or array}');
endsnippet

snippet try "try, catch" b
try {
	$0${VISUAL}
} catch (error) {
	console.log(error);
}
endsnippet

# ES6

snippet get "get() ES6" b
get ${1:method}() {
	${2:throw new Error('Accessor "$1()" not implemented by subclass');}
}
endsnippet

snippet set "set() ES6" b
set ${1:method}(${2:value}) {
	${3:throw new Error('Accessor "$1()" not implemented by subclass');}
}
endsnippet

# JEST

snippet desc "describe() jest" b
describe('$3', () => {
	const ${2:instance} = new $1();

	it('works', () => {
		expect($0true).toBe(true);
	});
});
endsnippet

snippet it "it() jest" b
it('${1:works}', () => {
	expect($0true).toBe(true);
});
endsnippet

snippet test "test() jest" b
test('something works', () => {
	expect($0true).toBe(true);
});
endsnippet

snippet toThrow "expect().toThrow()" b
expect(() => {
	${2:${VISUAL:what should throw}}$0
}).${1:not.}toThrow();
endsnippet

# JSDOC

snippet @class "@class Description" b
/**
 * ${1:Class representing a dot.}
 * @extends ${2:Point}
 */
$0
endsnippet

snippet @con "@constructor boilerplate" b
/**
 * ${1:${VISUAL:Construct the class.}}
 * @param {Object} args - options
 * @param {Object} [args.db] - optional db instance
 */
endsnippet

snippet @const "@constant boilerplate" b
/**
 * ${1:${VISUAL:Construct the class.}}
 * @constant
 * @type {string}
 * @default
 */
endsnippet

snippet @ex "@example boilerplate"
@example
\`\`\`
console.log(${1:true})
// expected output: ${2:true}
\`\`\`
endsnippet

snippet @exf "@example boilerplate for function"
@example
* ${1:instance}.${2:method}($3$0);
* // expected output: ${4:true}

endsnippet

snippet @f "@function jsDoc boilerplate" b
/**
 * ${1:${VISUAL:Describe this function method}}
 * $0@param {Object} args - options
 * @param {Sequelize} [args.db] - optional db instance
 * @returns {Object} - description
 */
endsnippet

snippet @fg "@function get/set accessor jsDoc" b
/**
 * ${2:${VISUAL:Describe get AND set accessor methods}}
 * @type {${1:mixed}}
 */
endsnippet

snippet @fo "@fileoverview Description" b
/**
 * @fileoverview ${1:${VISUAL:A description of the file}}$0
 */

endsnippet

snippet @p "@param {Type} varname Description"
@param {${1:Type}} ${2:varname} - ${3:Description}
endsnippet

snippet @po "@param optional {Type} varname Description"
@param {${1:Type}} [${2:varname}] - ${3:Description}
endsnippet

snippet @ret "@return {Type} Description"
@returns {${1:Type}} ${2:Description}
endsnippet

# SEQUELIZE

snippet seqr "Sequelize raw query SELECT" b
const result = await sequelize.query(${1:sql}, {
	bind: [
		customer.id,
		'0 secs',
		current_timestamp / 1000.0,
		`${randSecs(10, 60)} secs`,
	],
	replacements: {
		foo: 'bar',
	},
	type: sequelize.QueryTypes.SELECT,
});
endsnippet

snippet seqrd "Sequelize raw query DELETE" b
await sequelize.query(${1:sql}, {
	type: sequelize.QueryTypes.DELETE,
});
endsnippet

snippet seqri "Sequelize raw query INSERT" b
await sequelize.query(${1:sql}, {
	type: sequelize.QueryTypes.INSERT,
	replacements: {
		contact_data_id: args.contact_data_id,
		campaign_id: args.campaign_id,
		outcome_name: args.outcome_name,
	},
});
endsnippet

snippet seqru "Sequelize raw query UPDATE" b
await sequelize.query(${1:sql}, {
	type: sequelize.QueryTypes.UPDATE,
});
endsnippet

snippet "seqt(ransaction)?" "Sequelize new transaction" br
const result = await db.sequelize.transaction(async (transaction) => {
	await db.sequelize.reuseOrCreateTransaction(
		transaction,
		async (transaction) => {
			await db.foo.create({ bar: 'bar' }, { transaction });
			await db.bar.create({ foo: 'foo' }, { transaction });
		},
	);
	return ${1:result};
});
endsnippet
