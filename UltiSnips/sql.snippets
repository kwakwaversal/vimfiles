# BOILERPLATE

snippet [pgtap] "pgTAP boilerplate test" b
BEGIN;

SELECT plan(1);
/* SELECT * FROM no_plan(); */

/*****************************************************************************/
-- Basic test

SELECT ok(true);

/*****************************************************************************/
-- Finish

SELECT * FROM finish();

ROLLBACK;
endsnippet

# COLUMNS

snippet coltz "Column timestamp with time zone"
${1:column_name} timestamp with time zone ${2:default CURRENT_TIMESTAMP } ${3:not null},
endsnippet

snippet colt "Column text"
${1:column_name} text ${2:default '' }${3:not null},
endsnippet

snippet colu "Column uuid"
${1:column_name} uuid ${2:default public_gen_random_id() }${3:not null},
endsnippet

# COMMENTS

snippet com "Comment on table" b
COMMENT ON TABLE ${1:schema.table} IS
'${2:Insert comment here}';

endsnippet

snippet comc "Comment on column" b
COMMENT ON COLUMN ${1:schema.table.column} IS
'${2:Insert comment here}';

endsnippet

snippet comf "Comment on function" b
COMMENT ON FUNCTION ${1:schema.function_name} IS
'${2:Insert comment here}';

endsnippet

snippet comn "Comment on schema" b
COMMENT ON SCHEMA ${1:schemaname} IS
'${2:Insert comment here}';

endsnippet

snippet comT "Comment on type" b
COMMENT ON TYPE ${1:schema.type} IS
'${2:Insert comment here}';

endsnippet

# GENERAL

snippet dft "Create function trigger" b
CREATE OR REPLACE FUNCTION ${1:schema.function_name}()
	RETURNS trigger AS
$BODY$
-- This is a good place to put a brief comment about this trigger function.
DECLARE
	foo RECORD;
	some_table schema.table_name%rowtype;

BEGIN
	IF TG_OP = 'INSERT' THEN
	$0
	ELSIF TG_OP = 'UPDATE' THEN

	END IF;

	RETURN NEW;
END;
$BODY$ LANGUAGE ${2:plpgsql} VOLATILE;

endsnippet

snippet dfr "Delete function" b
DROP FUNCTION ${1:schema.function_name}();
endsnippet

snippet dfv "Verify function" b
SELECT has_function_privilege('${1:schema.function_name}(${2:attrs})', 'execute');
endsnippet

snippet fk "Foreign key (cascade)" b
ALTER TABLE ONLY ${1:`!v strlen(getreg("t")) ? getreg("t") : "schema.table" `}
	ADD CONSTRAINT ${1/(?:[^.]+\.)?(.*)/$1/}_${2/(.*)/$1/}_fkey
		FOREIGN KEY ($2) REFERENCES ${3:schema.other_table}(${4:id})
			ON UPDATE $0CASCADE ON DELETE CASCADE;

endsnippet

snippet idx "Index" b
CREATE INDEX ${1/(?:[^.]+\.)?(.*)/$1/}_${2/(.*)/$1/}_idx ON ${1:schema.table}
	USING btree (${2:column});

endsnippet

snippet pk "Primary key" b
ALTER TABLE ONLY ${1:schema.table}
	ADD CONSTRAINT ${1/(?:[^.]+\.)?(.*)/$1/}_${2/(.*)/$1/}_pkey PRIMARY KEY (${2:id});

endsnippet

snippet schema "Create schema" b
CREATE SCHEMA ${1:schemaname};
endsnippet

snippet schemar "Delete schema (sqitch revert)" b
DROP SCHEMA ${1:schemaname};
endsnippet

snippet schemav "Test schema (sqitch verify)"
SELECT pg_catalog.has_schema_privilege('${1:schemaname}', 'usage');
endsnippet

snippet table "Create a table" b
create table ${1:schema.table} (
	id uuid default public.gen_random_uuid() not null,
	id uuid default public.uuid_generate_v4() not null,$0
	created_at timestamp with time zone default CURRENT_TIMESTAMP not null,
	created_by uuid,
	updated_at timestamp with time zone default CURRENT_TIMESTAMP not null,
	updated_by uuid
);
endsnippet

snippet tabler "Delete a table (sqitch revert)"
DROP TABLE ${1:schema.table};
endsnippet

snippet tablev "Verify a table (sqitch verify)"
SELECT * FROM ${1:schema.table} WHERE false;
endsnippet

snippet /tr(igger)?/ "Trigger (insert or update)" br
CREATE TRIGGER ${1/\./_/}_trigger
	AFTER INSERT OR UPDATE ON ${1:schema.table}
		FOR EACH ROW
		EXECUTE PROCEDURE ${2:schema.trigger_function}();

endsnippet

# SHORTCUTS

snippet nn "NOT NULL"
not null
endsnippet

snippet /cl|rn/ "Raise notice" br
RAISE NOTICE '%', 'hello';
endsnippet

snippet tz "Timestamp with time zone"
timestamp with time zone
endsnippet
