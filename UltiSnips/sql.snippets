# COMMENTS

snippet com "Comment on table" b
COMMENT ON TABLE ${1:schema.table} IS
'${2:Insert comment here}';

endsnippet

snippet comc "Comment on column" b
COMMENT ON COLUMN ${1:schema.table.column} IS
'${2:Insert comment here}';

endsnippet

snippet comf "Comment on function" b
COMMENT ON FUNCTION ${1:schema.function_name} IS
'${2:Insert comment here}';

endsnippet

snippet coms "Comment on schema" b
COMMENT ON SCHEMA ${1:schemaname} IS
'${2:Insert comment here}';

endsnippet

snippet comt "Comment on type" b
COMMENT ON TYPE ${1:schema.type} IS
'${2:Insert comment here}';

endsnippet

# GENERAL

snippet fk "Foreign key (cascade)" b
ALTER TABLE ONLY ${1:`!v strlen(getreg("t")) ? getreg("t") : "schema.table" `}
	ADD CONSTRAINT ${1/(?:[^.]+\.)?(.*)/$1/}_${2/(.*)/$1/}_fkey
		FOREIGN KEY ($2) REFERENCES ${3:schema.other_table}(${4:id})
			ON UPDATE $0CASCADE ON DELETE CASCADE;

endsnippet

snippet idx "Index" b
CREATE INDEX ${1/(?:[^.]+\.)?(.*)/$1/}_${2/(.*)/$1/}_idx ON ${1:schema.table}
	USING btree (${2:column});

endsnippet

snippet pk "Primary key" b
ALTER TABLE ONLY ${1:schema.table}
	ADD CONSTRAINT ${1/(?:[^.]+\.)?(.*)/$1/}_${2/(.*)/$1/}_pkey PRIMARY KEY (${2:id});

endsnippet

snippet schema "Create schema" b
CREATE SCHEMA ${1:schemaname};
endsnippet

snippet schemar "Delete schema (sqitch revert)" b
DROP SCHEMA ${1:schemaname};
endsnippet

snippet schemav "Test schema (sqitch verify)"
SELECT pg_catalog.has_schema_privilege('${1:schemaname}', 'usage');
endsnippet

snippet table "Create a table" b
create table ${1:schema.table} (
	id uuid default public.gen_random_id() not null,
	id uuid default public.uuid_generate_v4() not null,$0
	created_at timestamp with time zone default CURRENT_TIMESTAMP not null,
	created_by uuid,
	updated_at timestamp with time zone default CURRENT_TIMESTAMP not null,
	updated_by uuid
);
endsnippet

snippet tr "Trigger (insert or update)" b
CREATE TRIGGER ${1/\./_/}_trigger
	AFTER INSERT OR UPDATE ON ${1:schema.table}
		FOR EACH ROW
		EXECUTE PROCEDURE ${2:schema.trigger_function}();

endsnippet

# SHORTCUTS

snippet nn "NOT NULL"
not null
endsnippet

snippet tz "Timestamp with time zone"
timestamp with time zone
endsnippet
